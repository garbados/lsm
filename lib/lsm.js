// Generated by CoffeeScript 1.6.2
(function() {
  var Counter, LSM, abs_diff_score, calc_percents, fwords, lex_and_tag, lexer, pos, tagger;

  pos = require('pos');

  lexer = new pos.Lexer();

  tagger = new pos.Tagger();

  fwords = require('./fwords');

  abs_diff_score = function(preps1, preps2) {
    var difference;

    difference = Math.abs(preps1 - preps2) / (preps1 + preps2);
    if (difference === Infinity) {
      return 0;
    } else {
      return 1 - difference;
    }
  };

  lex_and_tag = function(text) {
    var tag, tags, words, _i, _len, _results;

    words = lexer.lex(text);
    tags = tagger.tag(words);
    _results = [];
    for (_i = 0, _len = tags.length; _i < _len; _i++) {
      tag = tags[_i];
      _results.push(tag[1]);
    }
    return _results;
  };

  Counter = function(arr) {
    var counter, item, _i, _len;

    counter = {};
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (counter[item]) {
        counter[item] += 1;
      } else {
        counter[item] = 1;
      }
    }
    return counter;
  };

  calc_percents = function(counter) {
    var func, funcs, k, total, v, _i, _len;

    funcs = {};
    if (!((function() {
      var _results;

      _results = [];
      for (k in counter) {
        v = counter[k];
        _results.push(k);
      }
      return _results;
    })()).length) {
      return funcs;
    }
    total = ((function() {
      var _results;

      _results = [];
      for (k in counter) {
        v = counter[k];
        _results.push(v);
      }
      return _results;
    })()).reduce(function(x, y) {
      return x + y;
    });
    for (_i = 0, _len = fwords.length; _i < _len; _i++) {
      func = fwords[_i];
      funcs[func] = counter[func] / total;
    }
    return funcs;
  };

  LSM = (function() {
    function LSM(opts) {
      if (typeof opts === typeof '') {
        this.text = opts;
      } else {
        this.text = opts.text;
        this.percents = opts.percents;
      }
      if (!this.percents) {
        this.tags = lex_and_tag(this.text);
        this.counter = Counter(this.tags);
        this.percents = calc_percents(this.counter);
      }
    }

    LSM.prototype.compare = function(other) {
      var diff, func, percent, sum, total, weight, _ref;

      total = [];
      _ref = this.percents;
      for (func in _ref) {
        percent = _ref[func];
        weight = Math.abs(1 - (percent + other.percents[func]) / 2);
        diff = abs_diff_score(percent, other.percents[func]);
        total.push(diff * weight);
      }
      if (total.length) {
        sum = total.reduce(function(prev, curr) {
          if (prev) {
            return prev + curr;
          } else {
            return curr;
          }
        });
        return sum / total.length;
      } else {
        return 0;
      }
    };

    LSM.prototype.combine = function(other) {
      return new LSM({
        text: other.text || other,
        percents: other.percents
      });
    };

    return LSM;

  })();

  exports.LSM = LSM;

}).call(this);
