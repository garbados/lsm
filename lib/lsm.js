// Generated by CoffeeScript 1.6.1
(function() {
  var Counter, LSM, abs_diff_score, fwords, reduce_to_words;

  fwords = require('./fwords');

  abs_diff_score = function(preps1, preps2) {
    return 1 - (Math.abs(preps1 - preps2) / (preps1 + preps2 + .0001));
  };

  reduce_to_words = function(text) {
    var word, _i, _len, _ref, _results;
    _ref = text.match(/\w+/g);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      word = _ref[_i];
      _results.push(word.toLowerCase());
    }
    return _results;
  };

  Counter = function(arr) {
    var counter, item, _i, _len;
    counter = {};
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      item = arr[_i];
      if (counter[item]) {
        counter[item] += 1;
      } else {
        counter[item] = 1;
      }
    }
    return counter;
  };

  LSM = (function() {

    function LSM(text) {
      this.text = text;
      if (this.text) {
        this.reduced = reduce_to_words(this.text);
        this.counter = Counter(this.reduced);
        this.fwords = {};
        this.percents = {};
        this.calc_percents();
      }
    }

    LSM.prototype.calc_percents = function() {
      var func, word, wordlist, _i, _len, _results;
      _results = [];
      for (func in fwords) {
        wordlist = fwords[func];
        this.fwords[func] = 0;
        for (_i = 0, _len = wordlist.length; _i < _len; _i++) {
          word = wordlist[_i];
          this.fwords[func] += this.counter[word] || 0;
        }
        _results.push(this.percents[func] = this.fwords[func] / this.reduced.length);
      }
      return _results;
    };

    LSM.prototype.compare = function(other) {
      var diff, func, percent, sum, total, weight, _ref;
      total = [];
      _ref = this.percents;
      for (func in _ref) {
        percent = _ref[func];
        weight = Math.abs(1 - (percent + other.percents[func]) / 2);
        diff = abs_diff_score(percent, other.percents[func]);
        total.push(diff * weight);
      }
      sum = total.reduce(function(prev, curr) {
        if (prev) {
          return prev + curr;
        } else {
          return curr;
        }
      });
      return sum / total.length;
    };

    LSM.prototype.combine = function(other) {
      var text;
      text = other.text || other;
      return new LSM(this.text + ' ' + text);
    };

    return LSM;

  })();

  exports.LSM = LSM;

}).call(this);
