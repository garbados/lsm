// Generated by CoffeeScript 1.6.2
(function() {
  var assert, cmb, fs, is_autosimilar, lsm, most_alike, most_average, texts;

  lsm = require('./lsm').LSM;

  fs = require('fs');

  cmb = require('js-combinatorics').Combinatorics;

  assert = require('assert');

  is_autosimilar = function(texts) {
    var autolikeness, text, _i, _len, _ref;

    _ref = (function() {
      var _j, _len, _results;

      _results = [];
      for (_j = 0, _len = texts.length; _j < _len; _j++) {
        text = texts[_j];
        _results.push(text.text);
      }
      return _results;
    })();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      text = _ref[_i];
      autolikeness = text.compare(text);
      if (autolikeness !== 1) {
        return false;
      }
    }
    return true;
  };

  most_alike = function(texts) {
    var combos, likeness, next, results;

    combos = cmb.combination(texts, 2);
    results = [];
    while (next = combos.next()) {
      likeness = next[0].text.compare(next[1].text);
      results.push([next[0].name, next[1].name, likeness]);
    }
    return results.sort(function(a, b) {
      return b[2] - a[2];
    });
  };

  most_average = function(texts) {
    var everybody, name, profile, profiles, results, text, _i, _len;

    profiles = {};
    everybody = new lsm('');
    for (_i = 0, _len = texts.length; _i < _len; _i++) {
      text = texts[_i];
      profiles[text.name] = text.text;
      everybody = everybody.combine(text.text);
    }
    results = [];
    for (name in profiles) {
      profile = profiles[name];
      results.push({
        name: name,
        value: profile.compare(everybody)
      });
    }
    results.sort(function(a, b) {
      return b.value - a.value;
    });
    return results;
  };

  texts = [];

  fs.readdir("" + __dirname + "/../data", function(err, files) {
    var file, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      _results.push((function(file) {
        return fs.readFile("" + __dirname + "/../data/" + file, function(err, data) {
          var averageness, likeness;

          texts.push({
            name: file,
            text: new lsm(data.toString())
          });
          if (files.length === Object.keys(texts).length) {
            assert(is_autosimilar(texts));
            likeness = most_alike(texts);
            averageness = most_average(texts);
            console.log(likeness);
            return console.log(averageness);
          }
        });
      })(file));
    }
    return _results;
  });

}).call(this);
